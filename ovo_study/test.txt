// 자바스크립트

변수 선언
    var : 함수 스코프를 가지고 있기에 if 문의 블록과 관계없이 접근 가능
    const : 블록 스코프를 가짐, 블록의 범위 {} 밖에서 접근 불가능 / 한 번 값을 할당하면 변경 불가능
    let : 블록 스코프를 가짐, 블록의 범위 {} 밖에서 접근 불가능 / 값 변경 가능

템플릿 문자열
    const num = 1;
    const num2 = 2;
    const result = 3;
    const str = `${num} 더하기 ${num2}는 ${result}`;
    console.log(str);

객체 리터럴
    메서드에 함수를 연결할 때 콜론과 function을 붙이지 않아도 됨.

화살표 함수
    기존의 funcion() {} 사용 가능
    const add = (x,y) => {
        retrun x + y;
    }

데이터 속성과 dateset
    date-user-job = "designer" 이처럼 data-로 시작하면 데이터 사용하여 서버에 요청함.
    따라서 dataset.monthSalary = 10000; / dataset에 데이터를 넣으면
    data-month-salary = "10000" 라는 속성이 생김

// 노드 (-8/31일까지)

    코드를 모듈로 만들 수 있음
    모듈 : 특정한 기능을 하는 함수나 변수들의 집합 / 모듈은 재사용성이 좋음

노드 내장 객체
    global (전역객체) : window와 같은 전역 객체로 모든 파일에 접근 가능하며 global.console 인데 global을 생략한거임
    console : 디버깅을 위해 사용하며 보통 값이 제대로 불러오는지 확인함.
    타이머 : setTimeout(밀리 초 이후 함수 실행), setInterval(밀리초마다 반복 실행), setImmediate(즉시 함수 실행)
    __filename / __dirname : 파일 경로 설정

파일 시스템 접근하기
    const fs = require();
    fs.readFile('경로', (err, data)) => {
        console.log()
    }
    이러면 경로 파일을 읽어올 수 있음

http 모듈로 서버 만들기
    const http = require('http');

    http.createServer((req,res) => { // req : 서버로 요청 , res : 서버로 응답
        // 이벤트 내용
    });

https 모튤
    : 웹 서버에 SSL 암호화를 추가한 것. GET이나 POST 데이터를 암호화하는 것

Rest와 라우팅 사용하기
    주소에 서버 html(css, js 등)을 불러올 수 있음 -> 서버가 이해하기 쉬운 주소를 사용하는 것이 REST

    /user : 사용자 정보에 관련된 자원 요청
    /post : 게시글에 관련된 자원 요청

쿠키와 세션 이해하기
    서버로부터 쿠키가 오면 웹 브라우저는 쿠키를 저장했다가 요청할 때마다 쿠키 동봉해서 보냄.
    쿠키는 요청의 헤더에 담겨 전송됨.

cluster 모듈
    : 노드가 CPU 코어를 모두 사용할 수 있게 해주는 모듈 , 서버의 개수만큼 요청을 분산하여 서버에 무리가 덜 가게함.

Express 모듈
    : 다른 사람들이 만들어둔 모듈임 
    // nodemon 패키지 : 소스 코드가 바뀔 때마다 자동으로 노드 실행하는 패키지

미들웨어
    : 요청과 응답의 중간에 위치함. app.use와 함께 사용함.
    매개변수가 req, res, next 함수
    미들웨어는 위에서 아래로 순서대로 실행되면서 요청과 응답 사이에 특별한 기능을 추가할 수 있음

    app.use(미들웨어) // 모든 요청에서 미들웨어 실행
    app.use('/abc', 미들웨어) // abc로 시작하는 요청에서 미들웨어 실행
    app.post('/abc', 미들웨어) // abc로 시작하는 POST 요청에서 미들웨어 실행

    dotenv 패키지 : process.env를 관리하기 위해 설치
    static : 정적인 파일들을 제공하는 라우터 역할
        ㄴ app.use('요청 경로', express.static('실제 경로')); // 정적 파일들이 담겨있는 폴더 지정
    body-parser : 본문에 있는 데이터를 해석해서 req.body 객체로 만들어주는 미들웨어 // 보통 폼이나 ajax 요청의 데이터 처리
    cookie-parser : 요청에 동봉된 쿠키를 해석해 req.cookies 객체로 만듬. 유효 기간이 지난 쿠키는 알아서 걸러냅니다.
    express-session : 세션 관리용 미들웨어 , 로그인 등의 이유로 세션을 구현하거나 특정 사용자를 위한 데이터를 임시적으로 저장할 때 매우 유용
        ㄴ resave : 요청이 올 때 세션에 수정 사항이 생기지 않더라도 세션을 다시 저장할지 설정하는 것
        ㄴ saveUninitialized : 세션에 저장할 내역이 없더라도 처음부터 세션을 생성할지 설정
        




// 궁금한 것
 res.write() res.end() 사용하는 부분은 알겠지만 왜 사용하는지 모르겠음 굳이? -> 요청 마무리를 무조건 지어야하기에 end를 쓰는건가?
  ㄴ end 는 안써도 됨. / 응답을 끝낼 때 사용하고 안그러면 계속 요청이 들어옴