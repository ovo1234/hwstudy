// 자바스크립트

변수 선언
    var : 함수 스코프를 가지고 있기에 if 문의 블록과 관계없이 접근 가능
    const : 블록 스코프를 가짐, 블록의 범위 {} 밖에서 접근 불가능 / 한 번 값을 할당하면 변경 불가능
    let : 블록 스코프를 가짐, 블록의 범위 {} 밖에서 접근 불가능 / 값 변경 가능

템플릿 문자열
    const num = 1;
    const num2 = 2;
    const result = 3;
    const str = `${num} 더하기 ${num2}는 ${result}`;
    console.log(str);

객체 리터럴
    메서드에 함수를 연결할 때 콜론과 function을 붙이지 않아도 됨.

화살표 함수
    기존의 funcion() {} 사용 가능
    const add = (x,y) => {
        retrun x + y;
    }

데이터 속성과 dateset
    date-user-job = "designer" 이처럼 data-로 시작하면 데이터 사용하여 서버에 요청함.
    따라서 dataset.monthSalary = 10000; / dataset에 데이터를 넣으면
    data-month-salary = "10000" 라는 속성이 생김

// 노드 

    코드를 모듈로 만들 수 있음
    모듈 : 특정한 기능을 하는 함수나 변수들의 집합 / 모듈은 재사용성이 좋음

노드 내장 객체
    global (전역객체) : window와 같은 전역 객체로 모든 파일에 접근 가능하며 global.console 인데 global을 생략한거임
    console : 디버깅을 위해 사용하며 보통 값이 제대로 불러오는지 확인함.
    타이머 : setTimeout(밀리 초 이후 함수 실행), setInterval(밀리초마다 반복 실행), setImmediate(즉시 함수 실행)
    __filename / __dirname : 파일 경로 설정

파일 시스템 접근하기
    const fs = require();
    fs.readFile('경로', (err, data)) => {
        console.log()
    }
    이러면 경로 파일을 읽어올 수 있음

http 모듈로 서버 만들기
    const http = require('http');

    http.createServer((req,res) => {
        // 이벤트 내용
    });

Rest와 라우팅 사용하기
    주소에 서버 html(css, js 등)을 불러올 수 있음 -> 서버가 이해하기 쉬운 주소를 사용하는 것이 REST

    /user : 사용자 정보에 관련된 자원 요청
    /post : 게시글에 관련된 자원 요청